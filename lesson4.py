'''
1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
'''
def salary(count_hours, per_hour, bonus=0):
    return count_hours * per_hour + bonus

print(salary(9, 100,))

'''
2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
Результат: [12, 44, 4, 10, 78, 123].
'''
from random import randint

lst = [randint(1,100) for i in range(10)]
sort_list = [lst[i] for i in range(1, len(lst)) if lst[i] > lst[i-1]]
print(lst, sort_list, sep='\n')

'''
3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
Подсказка: использовать функцию range() и генератор.
'''
lst = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]
print(lst)

'''
4. Представлен список чисел. Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
Результат: [23, 1, 3, 10, 4, 11]
'''

from random import randint

lst = [randint(1,15) for i in range(15)]
result = [lst[i] for i in range(len(lst)) if lst.count(lst[i]) < 2]
print(lst, result, sep='\n')

'''
5. Реализовать формирование списка, используя функцию range() и возможности генератора.
В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
Подсказка: использовать функцию reduce().
'''
from functools import reduce
lst = [i for i in range(100,1001) if i % 2 == 0]
print(lst, reduce(lambda x, y: x * y, lst), sep='\n')

'''
6. Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools. 
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. 
Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
'''
#подзадание a
from itertools import count, cycle
for i in count(5):
    if i > 20:
        break
    print(i)
print('конец первого подзадания')

#подзадание б
from random import randint
lst = [randint(1, 50) for i in range(5)]
cnt = 0
for i in cycle(lst):
    if cnt > len(lst) * 3:
        break
    cnt += 1
    print(i)
print('конец второго подзадания')

'''
7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. 
При вызове функции должен создаваться объект-генератор. 
Функция должна вызываться следующим образом: for el in fact(n). 
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.
'''

def fact(n):
    for i in range(1, n+1):
        yield i
#печатаем элементы от 1 до n
for i in fact(4):
    print(i)
print('--------------')
#печатаем поочередное умножение всех элементов от 1 до n
cnt = 1
for i in fact(4):
    cnt *= i
    print(cnt)